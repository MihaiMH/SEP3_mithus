@page "/PendingUsers"
@using HttpClients.ClientInterfaces
@using Domain.Models
@inject IUserService userService;
@inject NavigationManager _nav;
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]
<HeaderEl title="See the pending users" description="Bellow you will find all the pending users that are waiting to be reviewed."/>


<div class="pageContent">
    <h1 class="body_title">
        <b>See pending users</b>
    </h1>
    <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: center;">
        @if (users == null)
        {
            <div class="spinner-border text-primary" style="width: 5rem; height: 5rem;"role="status">
              <span class="sr-only"></span>
            </div>
        }
        else if (!users.Any())
        {
            <span>No users to be found</span>
        }
        else
        {
            @foreach (var user in users)
            {
                if (user.Role.Name == "Pending")
                {
                    <div class="card" style="width: 250px;">
                        <div class="card-body">
                            <h5 class="card-title">@user.FirstName @user.LastName</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@user.Email</h6>
                            <h6 class="card-subtitle mb-2 text-muted">@user.Role.Name</h6>
                            <div class="statusField">
                                <button class="btn btn-primary" @onclick="() => UpdateUserRole(Convert.ToInt32(user.ID), 2)" @onclick:preventDefault>Update</button>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>


@code {
    IEnumerable<Domain.Models.User>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await userService.GetAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void UpdateUserRole(int userId, int roleId)
    {
        try
        {
            await userService.SetUserStatusAsync(userId, roleId);
            Console.WriteLine("Post status is" + roleId);
            users = null;
            StateHasChanged();
            users = await userService.GetAllUsersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    void Refresh()
    {
        _nav.NavigateTo("/PendingUsers");
    }

}