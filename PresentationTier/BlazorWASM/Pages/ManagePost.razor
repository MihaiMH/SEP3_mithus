@page "/ManagePost"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPostService postService;
@inject NavigationManager _nav;
@using BlazorInputTags;

<HeaderEl title="Manage a post" description="This is where you can edit or delete your post in case something came up."/>

<div class="pageContent">

    <h1 class="body_title">
        <b>Your post</b>
    </h1>

    <div class="container card">
        <form action="action_page.php">
            <label for="title">Title</label>
            <input type="text" id="title" name="title" placeholder="Title..." readonly @bind="Title" bind:event="oninput">

            <label for="Description">Description</label>
            <input type="text" id="Description" name="Description" placeholder="Description..." readonly @bind="Description" bind:event="oninput">

            <label for="Street">Street</label>
            <input type="text" id="Street" name="Street" placeholder="Street..." readonly @bind="Street" bind:event="oninput">

            <label for="Area">Area</label>
            <div class="area">
                <input type="number" id="Area" name="Area" placeholder="Area..." readonly @bind="Area" bind:event="oninput">
            </div>

            <label for="Utilities">Utilities</label>
            <input type="number" id="Utilities" name="Utilities" placeholder="Utilities..." readonly @bind="Utilities" bind:event="oninput">

            <label for="maxTenants">Max tenants</label>
            <input type="number" min="1" max="7" step="1" value="1" id="maxTenants" readonly name="maxTenants" @onchange=@(e => MaxTenants = int.Parse(e.Value.ToString()))>

            <label for="deposit">Deposit</label>
            <input type="number" min="0" max="10000" step="1000" value="0" id="deposit" readonly name="deposit" @onchange=@(e => Deposit = double.Parse(e.Value.ToString()))>

            <label for="monthlyRent">Monthly rent</label>
            <input type="number" min="0" max="10000" step="1000" value="0" id="monthlyRent" readonly name="deposit" @onchange=@(e => MonthlyRent = double.Parse(e.Value.ToString()))>

            <label for="moveInPrice">Move in Price</label>
            <input type="number" min="0" max="10000" step="1000" value="0" id="moveInPrice" readonly name="maxTenants" @onchange=@(e => MoveInPrice = double.Parse(e.Value.ToString()))>

            <label for="amenity">Amenity</label>
            
            <div class="amenityTags">
                 <InputTags OnTagAdded="OnTagAddedAsync" OnTagRemoved="OnTagRemovedAsync"/>
            </div>
           
            <div class="bodyDiv">
                <div class="intInput">
                    <label for="energy" class="energy">Energy rating</label>
                    <select name="energy" id="energy" @bind="EnergyRating" bind:event="oninput" disabled>
                        <option value="A">A</option>
                        <option value="B">B</option>
                        <option value="C">C</option>
                        <option value="D">D</option>
                        <option value="E">E</option>
                        <option value="F">F</option>
                        <option value="G">G</option>
                    </select>
                </div>
                <div class="intInputs">
                    <label for="type" class="type">Type</label>
                    <select name="type" id="type" @bind="Type" bind:event="oninput" disabled>
                        <option value="A">Penthouse</option>
                        <option value="B">Studio</option>
                        <option value="C">Duplex</option>
                        <option value="D">1 bedroom</option>
                        <option value="E">Luxury</option>
                    </select>
                </div>
            </div>
            <div class="bottomEllements">
                <div class="imageBody">
                    <label for="Images" class="imageHolder">
                        Upload Image
                        <img src="img/photo.png" class="photoIcon"/>
                        <input type="file" id="Images" name="Images" onchange="" multiple>
                        @* <InputFile OnChange="" multiple=""></InputFile> *@
                    </label>
                </div>
            </div>
            <div class="buttons">
                <button type="button" class="submitBtn">Delete</button>
                <button type="button" class="submitBtn">Save</button>
                <button type="button" class="submitBtn" @onclick="NavigateToIndex">Return</button>
            </div>
            
        </form>
    </div>
</div>


@code {
    public string UserID { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string Street { get; set; }
    public double Area { get; set; }
    public bool IsFurnished { get; set; }
    public bool HasBalcony { get; set; }
    public bool SmokingAllowed { get; set; }

    public bool HasParking { get; set; }
    public int MaxTenants { get; set; }

    public string Type { get; set; }

    public string EnergyRating { get; set; }
    public bool HasDishwasher { get; set; }
    public bool HasWashingMachine { get; set; }
    public bool HasDryer { get; set; }
    public double MonthlyRent { get; set; }
    public double Deposit { get; set; }
    public double MoveInPrice { get; set; }
    public double Utilities { get; set; }
    public string Status { get; set; }
    
    public List<string> Tags { get; set; } = new();

    private Task OnTagAddedAsync(string tag)
    {
        Tags.Add(tag);
        return Task.CompletedTask;
    }

    private Task OnTagRemovedAsync(string tag)
    {
        Tags.Remove(tag);
        return Task.CompletedTask;
    }
    
    private async Task Create()
    {
    // resultMsg = "";

        try
        {
            PostCreationDTO postDto = new PostCreationDTO
            {
                // UserID = "",
                // Title = Title,
                // Description = Description,
                // Street = Street,
                // Area = Area,
                // IsFurnished = IsFurnished,
                // HasBalcony = HasBalcony,
                // SmokingAllowed = SmokingAllowed,
                // HasParking = HasParking,
                // MaxTenants = MaxTenants,
                // Type = Type,
                // EnergyRating = EnergyRating,
                // HasDishwasher = HasDishwasher,
                // HasWashingMachine = HasWashingMachine,
                // HasDryer = HasDryer,
                // MonthlyRent = MonthlyRent,
                // Deposit = Deposit,
                // MoveInPrice = MoveInPrice,
                // Utilities = Utilities,
                // CreationDate = "",
                // Status = ""
            };
            Console.WriteLine(postDto.ToString());

            await postService.CreatePostAsync(postDto);
    // username = "";
    // resultMsg = "User successfully created";
    // color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    // resultMsg = e.Message;
    // color = "red";
        }
    }

    private void NavigateToIndex()
    {
        _nav.NavigateTo("/");
    }
}