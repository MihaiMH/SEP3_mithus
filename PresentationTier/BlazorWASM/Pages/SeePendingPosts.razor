@page "/SeePendingPosts"
@using Domain.Models;
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject NavigationManager _nav;
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]

<HeaderEl title="See the pending posts" description="Bellow you will find all the pending posts that are waiting to be reviewed."/>

<div class="pageContent">
    <h1 class="body_title">
        <b>See pending posts</b>
    </h1>
    <table class="table table-striped table-bordered">
        <thead>
        <tr>
            <th class="text-center">User Id</th>
            <th class="text-center">Post Id</th>
            <th class="text-center">Title</th>
            <th class="text-center">Creation Date</th>
            <th class="text-center">Status</th>
            <th class="text-center">Change Status</th>
        </tr>
        </thead>
        <tbody>
        @if (posts == null)
        {
            <tr>
                <td>Loading</td>

            </tr>
        }
        else if (!posts.Any())
        {
            <span>No posts to be found</span>
        }
        else
        {
            @foreach (var post in posts)
            {
                Console.WriteLine(post.ID);

                @if (post.PostStatus.Status == "Pending")

                {
                    <tr>
                        <td class="text-center">@post.UserID.ID</td>
                        <td  class="text-center"><a href="/post/@post.ID" style="text-decoration: none">
                            @post.ID
                        </a></td>
                        <td class="text-center">@post.Title</td>
                        <td class="text-center">@post.CreationDate.ToString()</td>
                        <td class="text-center">@post.PostStatus.Status</td>
                        <td>
                            <div class="statusField">
                                <select name="status" id="status" @bind="@post.PostStatus.ID">
                                    @foreach (var postStatus in _postStatuses)
                                    {
                                        <option value="@postStatus.ID">@postStatus.Status</option>
                                    }
                                </select>
                                <button class="btn btn-primary" @onclick="() => updatePostStatus(post.ID, post.PostStatus.ID)">Update</button>

                            </div>
                        </td>
                    </tr>
                }
            }
        }
        </tbody>
    </table>
</div>

@code {
    IEnumerable<Domain.Models.Post>? posts;
    IEnumerable<PostStatus> _postStatuses;
    // PostStatus? postStatus;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _postStatuses = await postService.GetPostStatusesAsync();
            posts = await postService.GetAllPostsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void NavigateTo(long i)
    {
        _nav.NavigateTo("/post/" + i);
    }

    private async void updatePostStatus(long postId, long postStatusId)
    {
        try
        {
            await postService.SetPostStatusAsync(postId, postStatusId);
            Console.WriteLine("POst id is " + postId + " Post status id is " + postStatusId);
            posts = null;
            StateHasChanged();
            posts = await postService.GetAllPostsAsync();
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}