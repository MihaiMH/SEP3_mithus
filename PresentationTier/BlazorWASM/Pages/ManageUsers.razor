@page "/ManageUsers"
@inject IUserService userService;
@using Domain.Models;
@using HttpClients.ClientInterfaces
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]

<HeaderEl title="Create a moderator" description="The form presented to you bellow, will help you create a new moderator account."/>

<div class="pageContent">
    <h1 class="body_title">
        <b>Manage users</b>
    </h1>
    <table class="table table-striped table-bordered">
        <thead>
        <tr>
            <th class="text-center">Firstname</th>
            <th class="text-center">Lastname</th>
            <th class="text-center">Email</th>
            <th class="text-center">Change Role</th>
        </tr>
        </thead>
        <tbody>
        @if (users == null)
        {
            <span>No users found</span>
        }
        else if (!users.Any())
        {
            <span>No users to be found</span>
        }
        else
        {
            @foreach (var user in users)
            {
                if (!user.Role.Name.Equals("Pending"))
                {
                    <tr>
                        <td class="text-center">@user.FirstName</td>
                        <td class="text-center">@user.LastName</td>
                        <td class="text-center">@user.Email</td>
                        <td class="text-center">
                            <div class="roleField">
                                <select id="role" @bind="@user.Role.ID">
                                    @foreach (var userRole in roles)
                                    {
                                        <option value="@userRole.ID">@userRole.Name</option>
                                    }
                                </select>
                                <button class="btn btn-primary" @onclick="() => updateUserRole(System.Convert.ToInt32(user.ID), Convert.ToInt32(user.Role.ID))">Update</button>

                            </div>
                        </td>
                    </tr>
                }
            }
        }


        </tbody>
    </table>
</div>

@code {
    IEnumerable<Domain.Models.User>? users;
    IEnumerable<Role> roles;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            roles = await userService.GetRolesAsync();
            users = await userService.GetAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void updateUserRole(int userId, int roleId)
    {
        try
        {
            await userService.SetUserStatusAsync(userId, roleId);

            Console.WriteLine("User role updated!");
            users = null;
            StateHasChanged();
            users = await userService.GetAllUsersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}