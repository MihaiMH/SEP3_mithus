@page "/ManageUsers"
@inject IUserService userService;
@using Domain.Models;
@using HttpClients.ClientInterfaces
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]
<HeaderEl title="Manage users" description="The form presented to you bellow, will help you manage users' accounts."/>

<div class="pageContent">
    <h1 class="body_title">
        <b>Manage users</b>
    </h1>
     <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: center;">
         @if (users == null)
         {
             <div class="spinner-border text-primary" style="width: 5rem; height: 5rem;"role="status">
               <span class="sr-only"></span>
             </div>
         }
        else if (!users.Any())
        {
            <span>No users to be found</span>
        }
        else
        {
            @foreach (var user in users)
            {
                if (!user.Role.Name.Equals("Pending"))
                {
                    <div class="card" style="width: 250px;">
                        <div class="card-body">
                            <h5 class="card-title">@user.FirstName @user.LastName</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@user.Email</h6>
                            <div class="roleField">
                                <select id="role" @bind="@user.Role.ID">
                                    @foreach (var userRole in roles)
                                    {
                                        <option value="@userRole.ID">@userRole.Name</option>
                                    }
                                </select>
                                <button class="btn btn-primary" @onclick="() => updateUserRole(System.Convert.ToInt32(user.ID), Convert.ToInt32(user.Role.ID))">Update</button>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>

</div>

@code {
    IEnumerable<Domain.Models.User>? users;
    IEnumerable<Role> roles;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            roles = await userService.GetRolesAsync();
            users = await userService.GetAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void updateUserRole(int userId, int roleId)
    {
        try
        {
            await userService.SetUserStatusAsync(userId, roleId);

            Console.WriteLine("User role updated!");
            users = null;
            StateHasChanged();
            users = await userService.GetAllUsersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}