@page "/SeePendingPosts"
@using Domain.Models;
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject NavigationManager _nav;
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]

<HeaderEl title="See the pending posts" description="Bellow you will find all the pending posts that are waiting to be reviewed."/>

<div class="pageContent">
    <h1 class="body_title">
        <b>See pending posts</b>
    </h1>
    <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: center;">
        @if (posts == null)
        {
            <div class="spinner-border text-primary" style="width: 5rem; height: 5rem;"role="status">
              <span class="sr-only"></span>
            </div>
        }
        else if (!posts.Any())
        {
            <span>No users to be found</span>
        }
        else
        {
            @foreach (var user in posts)
            {
                if (user.PostStatus.Status == "Pending")
                {
                    <div class="card" style="width: 450px;">
                        <div class="card-body">
                            <h5 class="card-title">ID: @user.ID <br>Title: @user.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Description: @user.Description</h6>
                            <h6 class="card-subtitle mb-2 text-muted">Creation date: @user.CreationDate</h6>
                            <h6 class="card-subtitle mb-2 text-muted">Current status: @user.PostStatus.Status</h6>
                            <div class="statusField">
                                <select name="status" id="status" @bind="@user.PostStatus.ID">
                                    @foreach (var postStatus in _postStatuses)
                                    {
                                        <option value="@postStatus.ID">@postStatus.Status</option>
                                    }
                                </select>
                                <button class="btn btn-primary" @onclick="() => updatePostStatus(user.ID, user.PostStatus.ID)">Update</button>

                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    IEnumerable<Domain.Models.Post>? posts;
    IEnumerable<PostStatus> _postStatuses;
    // PostStatus? postStatus;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _postStatuses = await postService.GetPostStatusesAsync();
            posts = await postService.GetAllPostsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void NavigateTo(long i)
    {
        _nav.NavigateTo("/post/" + i);
    }

    private async void updatePostStatus(long postId, long postStatusId)
    {
        try
        {
            await postService.SetPostStatusAsync(postId, postStatusId);
            posts = null;
            StateHasChanged();
            posts = await postService.GetAllPostsAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}