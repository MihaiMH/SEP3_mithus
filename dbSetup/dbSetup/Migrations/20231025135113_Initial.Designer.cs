// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dbSetup.Model;

namespace dbSetup.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231025135113_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("dbSetup.Model.Properties.AccessLevel", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("AccessLevel");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Chat", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("clientID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("landlordID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("postIDID")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("clientID");

                    b.HasIndex("landlordID");

                    b.HasIndex("postIDID");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.ChatMessage", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Image", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Message", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("context")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Post", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasColumnType("varbinary(16)");

                    b.Property<double>("area")
                        .HasColumnType("double");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime");

                    b.Property<double>("deposit")
                        .HasColumnType("double");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("energyRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("hasBalcony")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("hasDishwasher")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("hasDryer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("hasParking")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("hasWashingMachine")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFurnished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("maxTenants")
                        .HasColumnType("int");

                    b.Property<double>("monthlyRent")
                        .HasColumnType("double");

                    b.Property<double>("moveInPrice")
                        .HasColumnType("double");

                    b.Property<bool>("smokingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("utilities")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.PostImage", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.User", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Chat", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.User", "client")
                        .WithMany()
                        .HasForeignKey("clientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dbSetup.Model.Properties.User", "landlord")
                        .WithMany()
                        .HasForeignKey("landlordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dbSetup.Model.Properties.Post", "postID")
                        .WithMany()
                        .HasForeignKey("postIDID");

                    b.Navigation("client");

                    b.Navigation("landlord");

                    b.Navigation("postID");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.ChatMessage", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.Chat", "chatID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dbSetup.Model.Properties.Message", "messageID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatID");

                    b.Navigation("messageID");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Message", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.User", "senderID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("senderID");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.Post", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.User", "userID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userID");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.PostImage", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.Image", "imageID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dbSetup.Model.Properties.Post", "postID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("imageID");

                    b.Navigation("postID");
                });

            modelBuilder.Entity("dbSetup.Model.Properties.User", b =>
                {
                    b.HasOne("dbSetup.Model.Properties.AccessLevel", "accessLevelID")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accessLevelID");
                });
#pragma warning restore 612, 618
        }
    }
}
