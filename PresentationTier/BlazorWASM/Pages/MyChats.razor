@layout EmptyLayout
@page "/MyChats"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Security.Claims
@using Domain.DTOs
@attribute [Authorize("MustBeAdmin")]
@attribute [Authorize("MustBeMod")]
@attribute [Authorize("MustBeLandlord")]
@attribute [Authorize("MustBeClient")]
@attribute [Authorize("MustBePending")]
@inject IChatService chatService;
@inject IUserService userService;
@inject IPostService postService;
<AuthorizeView>
    <Authorized>
        <div class="chats ">
            <div class="ChatList" style="">
                @if (chats == null)
                {<div style="display: flex; justify-content: center">
                     <div class="spinner-border text-primary" style="width: 5rem; height: 5rem;"role="status">
                         <span class="sr-only"></span>
                     </div>
                     </div>
                }
                else if (!chats.Any())
                {
                    <span>No chats to be found</span>
                }
                else
                {
                    @foreach (var chat in chats)
                    {
                        if (chat.ID == selectedID)
                        {
                            @if (id == chat?.Messages.FirstOrDefault()?.UserID)
                            {
                                <div @onclick="() => SelectChat(chat.ID, chat)">
                                    <ChatCard chat="@chat" selected="true">
                                        <p>@getLandlordName(chat.PostID)</p>
                                    </ChatCard>
                                </div>
                            }
                            else
                            {
                                if (chat != null)
                                {
                                    <div @onclick="() => SelectChat(chat.ID, chat)">
                                        <ChatCard chat="@chat" selected="true">
                                            <p>@users.First(u => u.ID == chat?.Messages.FirstOrDefault()?.UserID).FirstName @users.First(u => u.ID == chat?.Messages.FirstOrDefault()?.UserID).LastName</p>
                                        </ChatCard>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            @if (id == chat?.Messages.FirstOrDefault()?.UserID)
                            {
                                <div @onclick="() => SelectChat(chat.ID, chat)">
                                    <ChatCard chat="@chat" selected="false">
                                        <p>@getLandlordName(chat.PostID)</p>
                                    </ChatCard>
                                </div>
                            }
                            else
                            {
                                if (chat != null)
                                {
                                    <div @onclick="() => SelectChat(chat.ID, chat)">
                                        <ChatCard chat="@chat" selected="false">
                                            <p>@users.First(u => u.ID == chat?.Messages.FirstOrDefault()?.UserID).FirstName @users.First(u => u.ID == chat?.Messages.FirstOrDefault()?.UserID).LastName</p>
                                        </ChatCard>
                                    </div>
                                }
                            }
                        }
                    }
                }
            </div>
            <div class="ChatRoom">
                <div>

                    @if (id == selectedChat?.Messages.FirstOrDefault()?.UserID)
                    {
                        <h3 style="" class="postname">
                            @getLandlordName(selectedChat.PostID) - @selectedChat?.PostName
                        </h3>
                    }
                    else
                    {
                        if (selectedChat != null)
                        {
                            <h3 style="" class="postname">

                                @users.First(u => u.ID == selectedChat?.Messages.FirstOrDefault()?.UserID).FirstName @users.First(u => u.ID == selectedChat?.Messages.FirstOrDefault()?.UserID).LastName - @selectedChat?.PostName
                            </h3>
                        }
                    }

                </div>
                <div class="messages">
                    @if (selectedChat != null)
                    {
                        <ChatRoom chat="@selectedChat" users="users"/>
                    }
                    else
                    {
                        <h1>Start a conversation</h1>
                    }
                </div>
                <div class="input">
                    <input type="text" class="messageInput form-control" @bind="message" @onkeydown="Enter" placeholder="Your message...">
                    <button class="btn btn-outline-primary" style="margin-left: 10px" @onclick="sendMessage" @onkeydown="Enter">Send</button>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="error-template">
                        <h1>
                            Oops!
                        </h1>
                        <h2>
                            404 Not Found
                        </h2>
                        <div class="error-details">
                            Sorry, an error has occured, Requested page not found!
                        </div>
                        <div class="error-actions">
                            <a href="/" class="btn btn-primary btn-lg">
                                <span class="glyphicon glyphicon-home"></span>
                                Take Me Home
                            </a><a href="/ContactUs" class="btn btn-default btn-lg"><span class="glyphicon glyphicon-envelope"></span> Contact Support </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;


    IEnumerable<Chat> chats;
    IEnumerable<User> users;
    IEnumerable<Domain.Models.Post> posts;

    Chat selectedChat = null;
    long selectedID;

    string message = "";
    int id;

    
    public string getLandlordName(long ids)
    {
        int i = (int)ids;
        Domain.Models.Post temp = posts.First(u => u.ID == i);
        User temp2 = users.First(x => x.ID == temp.UserID.ID);
        return temp2.FirstName + " " + temp2.LastName;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (message != "")
            {
                sendMessage();
            }
        }
    }

    public void SelectChat(long id, Chat chat)
    {
        selectedID = id;
        selectedChat = chat;
        message = "";
        StateHasChanged();
    }

    public async void sendMessage()
    {
        if (selectedChat != null)
        {
            SendMessageDTO dto = new()
            {
                ChatID = selectedChat.ID,
                UserID = id,
                Text = message,
                Time = DateTime.Now.ToString()
            };
            Message[] messages = new[]
            {
                new Message
                {
                    UserID = id,
                    Text = message,
                    Time = DateTime.Now.ToString()
                }
            };
            selectedChat.Messages = selectedChat.Messages.Concat(messages);
            Console.WriteLine(selectedChat.Messages.Last().Text);
            chatService.SendMessageAsync(dto, selectedChat.ID);
            message = "";

            StateHasChanged();

            chats = await chatService.GetChatByUser(id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal userblea = authState.User;
            string p = userblea.FindFirst("ID").Value;
            id = int.Parse(p);
            users = await userService.GetAllUsersAsync();
            chats = await chatService.GetChatByUser(id);
            posts = await postService.GetAllPostsAsync();
            selectedID = chats.FirstOrDefault().ID;
            selectedChat = chats.FirstOrDefault();
            Console.WriteLine("ALO");
            Console.WriteLine(selectedID);

    // while (true)
    // {
    //     chats = await chatService.GetChatByUser(id);
    //     selectedChat = chats.FirstOrDefault(x => x.ID == selectedID);
    //     await Task.Delay(1000);
    //     StateHasChanged();
    // }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}